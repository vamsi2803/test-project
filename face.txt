#**************Load predefined data on face frontals from opencv**************
          face_classifier=cv2.CascadeClassifier("haarcascade_frontalface_default.xml")
          
          def face_cropped(img):
            gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
            faces=face_classifier.detectMultiScale(gray,1.3,5)

            #scaling factor=1.3
            #Minimum neighbour=5

            for(x,y,w,h) in faces:
              face_cropped=img[y:y+h,x:x+w]
              return face_cropped
          cap=cv2.VideoCapture(0)
          img_id=0
          while True:
            ret,my_frame=cap.read()
            if face_cropped(my_frame) is not None:
              img_id+=1
              face=cv2.resize(face_cropped(my_frame),(450,450))
              face=cv2.cvtColor(face,cv2.COLOR_BGR2GRAY)
              file_name_path="data/user."+str(id)+"."+str(img_id) +".jpg"
              cv2.imwrite(file_name_path,face)
              cv2.putText(face,str(img_id),(50,50),cv2.FONT_HERSHEY_COMPLEX,2,(0,255,0),2)
              cv2.imshow("Cropped Face", face)

            if cv2.waitKey(1)==13 or int(img_id)==100:
              break
          cap.release()
          cv2.destroyAllWindows()

          messagebox.showinfo("Result","Generating data sets completed!!!")  

        
        except Exception as es:
          messagebox.showerror("Error",f"Due To:{str(es)}",parent=self.root)  

#****************** Mark Attendance******************
    def mark_attendance(self,r,n,d):
        with open("mouni.csv","r+",newline="\n") as f:
            myDataList=f.readlines()
            name_list=[]
            for line in myDataList:
                entry=line.split((","))  
                name_list.append(entry[0])
            
            if((r not in name_list) and  (n not in name_list)  and  (d not in name_list)):
            # if entry[0]==r and entry[4].strip()==datetime.now().strftime("%d/%m/%y"):
                #return
                with open('mouni.csv','a+',newline='\n') as f:
                    now=datetime.now()
                    d1=now.strftime("%d/%m/%Y")
                    dtString=now.strftime("%H:%M:%S")
                    f.writelines(f"\n{r},{n},{d},{dtString},{d1},Present")



    #***************Face recognition***************

    def face_recog(self):
        def draw_boundray(img,classifier,scaleFactor,minNeighbours,color,text,clf):
            gray_image=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
            features=classifier.detectMultiScale(gray_image,scaleFactor,minNeighbours)
            coords=[]

            for (x,y,w,h) in features:
                cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0),3)
                id,predict=clf.predict(gray_image[y:y+h,x:x+w])
                confidence=int(100*(1-predict/300))

                conn=mysql.connector.connect(host="localhost",username="root",password="Mouni@12",database="face_recognizer")
                my_cursor=conn.cursor()

                my_cursor.execute("select Name from student where Student_id="+str(id))
                n=my_cursor.fetchone()
                n=str(n)
                n=n.replace('(','').replace("'",'').replace("'",'').replace(')','').replace(',','')
                #n="+".join(str(n))
                #separator=""
                #n=separator.join(str(x) for x in n)

                my_cursor.execute("select Student_id from student where Student_id="+str(id))
                r=my_cursor.fetchone()
                r=str(r)
                r=r.replace('(','').replace("'",'').replace("'",'').replace(')','').replace(',','')
                #r="+".join(str(r))

                my_cursor.execute("select Dep from student where Student_id="+str(id))
                d=my_cursor.fetchone()
                d=str(d)
                d=d.replace('(','').replace("'",'').replace("'",'').replace(',','').replace(')','')
                #d="+".join(str(d))


                if confidence>77:
                    cv2.putText(img,f"Roll:{r}",(x,y-55),cv2.FONT_HERSHEY_COMPLEX,0.8,(255,255,255),3)
                    cv2.putText(img,f"Name:{n}",(x,y-30),cv2.FONT_HERSHEY_COMPLEX,0.8,(255,255,255),3)
                    cv2.putText(img,f"Department:{d}",(x,y-5),cv2.FONT_HERSHEY_COMPLEX,0.8,(255,255,255),3)
                    self.mark_attendance(r,n,d)
                    
                else:
                    cv2.rectangle(img,(x,y),(x+w,y+h),(0,0,255),3)
                    cv2.putText(img,"Unknown Face",(x,y-5),cv2.FONT_HERSHEY_COMPLEX,0.8,(255,255,255),3)

                coords=[x,y,w,h]

            return coords 

        def recognize(img,clf,faceCascade):
            coords=draw_boundray(img,faceCascade,1.1,10,(255,255,255),"Face",clf) 
            return img

        faceCascade=cv2.CascadeClassifier("haarcascade_frontalface_default.xml")
        clf=cv2.face.LBPHFaceRecognizer_create()
        clf.read("classifier.xml")
       # clf.read("classifier.xml")

        video_cap=cv2.VideoCapture(0) #0 for pc cam if external cam we use 1

        while True:
            ret,img=video_cap.read()
            img=recognize(img,clf,faceCascade)
            cv2.imshow("Welcome To Face Recognition",img)

            if cv2.waitKey(1)==13:
                break
        video_cap.release()
        cv2.destroyAllWindows()

def train_classifier(self):
        data_dir=("data") 
        path=[os.path.join(data_dir,file) for file in os.listdir(data_dir)]  

        faces=[]
        ids=[]
        
        for image in path:
            img=Image.open(image).convert('L')  #Gray scale image
            imageNp=np.array(img,'uint8')
            id=int(os.path.split(image)[1].split('.')[1])

            faces.append(imageNp)
            ids.append(id)
            cv2.imshow("Training",imageNp)
            cv2.waitKey(1)==13
        ids=np.array(ids)


        #**************Train the classifier and save****************
        
        clf=cv2.face.LBPHFaceRecognizer_create()
        clf.train(faces,ids)
        clf.write("classifier.xml")   
        cv2.destroyAllWindows()
        messagebox.showinfo("Result","Training datasets completed!!") 





